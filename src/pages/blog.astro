---
import Layout from '../layouts/Layout.astro';
import { PenTool, Globe, Trophy, Volleyball, BookOpen, Code, FileText, Rocket, Cpu, Newspaper } from 'lucide-astro';

const iconMap = { PenTool, Globe, Trophy, Volleyball, BookOpen, Code, Rocket, Cpu, Newspaper, FileText };

interface BlogPost {
    frontmatter: {
        title: string;
        date: string;
        description: string;
        tags?: string[];
        icon?: string;
    };
    url: string;
}

const posts = (await Astro.glob<BlogPost>('../pages/blogs/*.astro')).sort(
    (a, b) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime()
);

// Conta tag e tieni solo i 10 più usati
const tagCounts = posts.flatMap((p) => p.frontmatter.tags || []).reduce((acc, tag) => ((acc[tag] = (acc[tag] || 0) + 1), acc), {});
const allTags = Object.keys(tagCounts)
    .sort((a, b) => tagCounts[b] - tagCounts[a])
    .slice(0, 10);
---

<Layout title="Blog — Daniele Odorico">
    <section class="mb-12 sm:mb-20 max-w-7xl mx-auto">
        <h1 class="text-4xl sm:text-5xl font-bold leading-tight mb-3 text-[#f2f2f2]">Blog</h1>
        <p class="text-[#b8b8b8] mb-8">{posts.length} articoli pubblicati</p>

        <!-- TAG FILTER -->
        {
            allTags.length > 0 && (
                <div class="mb-10 flex flex-wrap gap-3">
                    <button class="tag active" data-tag="all">
                        #tutti
                    </button>
                    {allTags.map((tag) => (
                        <button class="tag" data-tag={tag}>
                            #{tag}
                        </button>
                    ))}
                </div>
            )
        }

        <!-- GRIGLIA POST -->
        <div id="post-grid" class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3"></div>

        <!-- PAGINAZIONE -->
        <div class="flex justify-center mt-10">
            <button id="load-more" class="load-btn">Carica altri articoli</button>
        </div>
    </section>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const buttons = document.querySelectorAll('button.tag') as NodeListOf<HTMLButtonElement>;
            const postGrid = document.getElementById('post-grid') as HTMLElement;
            const loadMoreBtn = document.getElementById('load-more') as HTMLButtonElement;

            // Cast esplicito a HTMLTemplateElement per il contenuto
            const posts = [...document.querySelectorAll('template[data-post]')] as HTMLTemplateElement[];

            const pageSize = 6;
            let currentIndex = 0;
            let currentTag = 'all';

            function renderPosts(reset = false) {
                if (reset) {
                    postGrid.innerHTML = '';
                    currentIndex = 0;
                }

                const filtered = posts.filter((t) => {
                    const first = t.content.firstElementChild as HTMLElement | null;
                    const tags = first?.dataset.tags?.split(',') || [];
                    return currentTag === 'all' || tags.includes(currentTag);
                });

                const nextBatch = filtered.slice(currentIndex, currentIndex + pageSize);
                nextBatch.forEach((frag) => postGrid.appendChild(frag.content.cloneNode(true)));

                currentIndex += pageSize;
                loadMoreBtn.style.display = currentIndex >= filtered.length ? 'none' : 'block';
            }

            buttons.forEach((btn) => {
                btn.addEventListener('click', () => {
                    buttons.forEach((b) => b.classList.remove('active'));
                    btn.classList.add('active');
                    currentTag = btn.dataset.tag ?? 'all';
                    renderPosts(true);
                });
            });

            loadMoreBtn.addEventListener('click', () => renderPosts());

            renderPosts();
        });
    </script>

    <!-- TEMPLATE POST -->
    {
        posts.map((post) => {
            const { title, date, description, tags = [], icon } = post.frontmatter;
            const IconComponent = iconMap[icon] || FileText;
            return (
                <template data-post>
                    <article class="card" data-tags={tags.join(',')}>
                        <div class="icon-wrapper mb-4">
                            <IconComponent class="icon-large" />
                        </div>
                        <h3 class="card-title">{title}</h3>
                        <p class="text-sm text-[#999] mb-3">{new Date(date).toLocaleDateString('it-IT')}</p>
                        <p class="card-body">{description}</p>
                        <div class="flex flex-wrap gap-2 mt-3">
                            {tags.map((tag) => (
                                <span class="tag-mini">{`#${tag}`}</span>
                            ))}
                        </div>
                        <a href={post.url} class="card-link mt-3 inline-block">
                            Leggi l'articolo
                        </a>
                    </article>
                </template>
            );
        })
    }

    <style>
        /* TAG filtro */
        .tag {
            font-family: 'JetBrains Mono', ui-monospace, SFMono-Regular, Menlo, monospace;
            color: #d16ba5;
            background: rgba(255, 255, 255, 0.06);
            padding: 0.3rem 0.6rem;
            border-radius: 0.4rem;
            border: 1px dashed rgba(209, 107, 165, 0.4);
            cursor: pointer;
            transition: all 0.2s ease;
            text-transform: lowercase;
        }
        .tag:hover {
            color: #00bcd4;
            border-color: rgba(0, 188, 212, 0.6);
        }
        .tag.active {
            background: rgba(209, 107, 165, 0.15);
            color: #00bcd4;
            border-color: rgba(0, 188, 212, 0.6);
        }

        .tag-mini {
            font-family: 'JetBrains Mono', ui-monospace;
            font-size: 0.8rem;
            color: #00bcd4;
            background: rgba(255, 255, 255, 0.04);
            padding: 0.15rem 0.35rem;
            border-radius: 0.35rem;
        }

        .card {
            background: rgba(0, 0, 0, 0.45);
            border: 1px solid rgba(255, 255, 255, 0.08);
            border-radius: 14px;
            padding: 1.4rem;
            transition:
                border-color 0.2s,
                box-shadow 0.2s,
                transform 0.15s;
        }
        .card:hover {
            border-color: rgba(209, 107, 165, 0.5);
            box-shadow: 0 0 18px rgba(209, 107, 165, 0.2);
            transform: translateY(-2px);
        }

        .card-title {
            font-weight: 700;
            color: #f2f2f2;
        }
        .card-body {
            color: #bfbfbf;
            font-size: 0.95rem;
            margin-bottom: 0.5rem;
        }

        .card-link {
            color: #d16ba5;
            text-decoration: none;
            border-bottom: 1px dashed rgba(209, 107, 165, 0.5);
            transition:
                color 0.2s ease,
                border-color 0.2s ease;
        }
        .card-link:hover {
            color: #00bcd4;
            border-bottom-color: rgba(0, 188, 212, 0.7);
        }

        .icon-wrapper {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
        }
        .icon-large {
            width: 15%;
            max-width: 64px;
            height: auto;
            color: #d16ba5;
            opacity: 0.9;
            transition:
                transform 0.3s ease,
                opacity 0.3s ease;
        }
        .card:hover .icon-large {
            transform: scale(1.2);
            opacity: 1;
        }

        .load-btn {
            color: #d16ba5;
            border: 1px solid rgba(209, 107, 165, 0.5);
            border-radius: 8px;
            padding: 0.6rem 1.2rem;
            background: transparent;
            transition: all 0.2s ease;
            font-weight: 600;
        }
        .load-btn:hover {
            color: #00bcd4;
            border-color: rgba(0, 188, 212, 0.7);
            transform: translateY(-1px);
        }
    </style>
</Layout>
